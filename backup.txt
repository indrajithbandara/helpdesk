http://silvio-r.github.io/spop/#demo-options

Send All button: 
Change Code => 'No connection to Mannage Engine'

//if(Lockr.get('lastSeq') == undefined){
//    Lockr.set('lastSeq', "000");
//}

<h4>Previous Ticket Number: <span class="text-info">{{ lastSeq }}</span></h4>
            
            <div class="field" ng-class="{'has-error' : !checkTicket(intakeRequest.ticketNumber.$viewValue) || (intakeRequest.ticketNumber.$invalid && !intakeRequest.ticketNumber.$pristine), 'form-group': true}">
                <label for="ticketNumber">Ticket Number <span class="req">*</span></label>
                <input class="form-control" type="text" id="ticketNumber" name="ticketNumber" ng-model="intakeRequest.ticketNumber" pattern="\d{3}" required>

                <div class="req" ng-if="data.ticketNumber.$dirty && !data.ticketNumber.$valid">This field is required</div>
            </div>

<!--<h4>Previous Ticket Number: <span class="text-info">{{ lastSeq }}</span></h4>
            
            <div class="field" ng-class="{'has-error' : !checkTicket(onlyRequest.ticketNumber.$viewValue) || (onlyRequest.ticketNumber.$invalid && !onlyRequest.ticketNumber.$pristine), 'form-group': true}">
                <label for="ticketNumber">Ticket Number <span class="req">*</span></label>
                <input class="form-control" type="text" id="ticketNumber" name="ticketNumber" ng-model="onlyRequest.ticketNumber" pattern="\d{3}" required>

                <div class="req" ng-if="data.ticketNumber.$dirty && !data.ticketNumber.$valid">This field is required in the following format "999"</div>
            </div>-->

<!--<div class="field">
                <label for="customer" >Customer <span class="req">*</span></label>
                <select name="customer" ng-model="onlyRequest.customer" ng-options="customer as customer.name for customer in customers" id="customer" required>
                </select>
                
                <br>
                
                <div>
                    <button type="button" ng-click="addCustomer()" class="ui primary button"><i class="add user icon"></i>&nbsp;Add customer</button> 
                </div>
            </div>-->

DOING:

//else{
//    console.log('Canceled');
//}

//currentWindow.close();
//console.log(currentWindow.hasFocus == true);
//console.log(openWindow.hasFocus == true);

Regra para Email:
    - Feedback:
    - Recover password:
        - Gravar no Firebase/MailGun => E-mail do Help Desk

Regra para Only
    - Se nao tiver internet:
        - Grava, mas com ticket que pode estar errado:
    - Pode ser editavel

Regra para Release:
    - Fechar requisicao depois de colher dados:
    - Gravar feedback em logs:
    - Gerar grafico com opinioes => Se for administrador pode ver:
    - Se nao tem internet, nao tem como inserir

Regra para Intake:
    - Se nao tiver internet:
        - Grava, mas com ticket que pode estar errado:
    - Pode ser editavel

Regra para stored requests:
    - Pode editar
    - Pode enviar
    - Se for Administrador, pode excluir

DONE:
Regra de negocio para Customers:
    - Nao pode repetir studentNumber se ele nao for N/A
    - Nao pode deletar email
    - Se for administrador pode deletar customer

Regra para Usuario:
    - Se for aministrador pode deletar usuario
    - Se for usuario corrente, nao mudar status proprio:
    (Change password View)
        - Se for usuario comum, pode apenas mudar senha;
        - Se for usuario administrador pode apenas mudar senha propria;
    - Se for administrador pode mudar outras senhas e role
    - Se for administrador pode deletar apenas outros

/*


            /*else{
                //Keep the focus
                openWindow.focus();   
            }*/

$scope.save = function() {
    var selectedRequest = $("#ticketNumber").val();

    closeRequest(selectedRequest, function(error, response, body){
        if(response.statusCode == 200){
            var status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
            bootbox.alert(status + ":" + message, function(){
                $window.location.href = '#!/main';  
            })
        }else{
            bootbox.alert("Error: " + error);
        }
    });
};

<!--<a class="item" ng-click="feedback()"><i class="edit icon"></i> Bugs / Suggestions</a>-->

<!--<a class="item" href="#" ng-click="reset()"><i class="history icon"></i> Reset all data</a>-->

$('#ticketNumber').mask('000-S');

    $scope.checkTicket = function(x){
        var requests = getData('requests');
        for (var i = 0; i < requests.length; i++) 
            if(requests[i].SUBJECT == x)
                return false;       
        return true;
    };

    // function to submit the form after all validation has occurred            
    $scope.save = function(data) {
        var filteredData = filterIntake(data);
        console.log(filteredData);
        addRequest(JSON.stringify(filteredData), function(response, error, body){
            if(response && response.statusCode == 200){
                var status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
                $.alert(status + ": " + message);
            }else{
                $.alert("Error: " + error);
                code = error.statusCode ? error.statusCode : -1;
                insertSQL('storedRequests', {input: JSON.stringify(filteredData), code: code});
            }
            $window.location.href = '#!/main';  
        });
     };

    $('#ticketNumber').mask('000-S');
    
    $scope.checkTicket = function(x){
        var requests = getData('requests');
        for (var i = 0; i < requests.length; i++) 
            if(requests[i].SUBJECT == x)
                return false;       
        return true;
    };
                
    $scope.save = function(data) {
        var filteredData = filterOnly(data);
        console.log(filteredData);
        addRequest(JSON.stringify(filteredData), function(response, error, body){
            if(response && response.statusCode == 200){
                var status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
                $.alert(status + ": " + message);
            }else{
                $.alert("Error: " + error);
                code = error.statusCode ? error.statusCode : -1;
                insertSQL('storedRequests', {input: JSON.stringify(filteredData), code: code});
            }
            $window.location.href = '#!/main';  
        });
     };

    $scope.$on('$viewContentLoaded', function() {
        if(!$scope.requests || $scope.requests.length == 0){
            $.alert({title: 'Warning',
                type: 'red',
                content: 'No open requests!', 
                onClose: function () {
                    $window.location.href = '#!/main';  
                },
            });
        }
    });

    $scope.delete = function(id){
        $.confirm({
            title: 'Warning!',
            content: "Are you sure you want to remove the request: " + id + "?",
            buttons: {
                confirm: function () {
                    deleteSQL("storedRequests", id);
                    $.alert({title: 'Success',
                        content: 'Request deleted successfully!', 
                        onClose: function () {
                            $window.location.reload();
                        },
                    });
                },
                cancel: function () {}
            }
        });
    }

    $scope.resend = function(id, input) {
        addRequest(input, function(response, error, body){
            if(response.statusCode == 200){
                var status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
                deleteSQL("storedRequests", id);
                $.alert("Request resent successfully!");
                $window.location.href = '#!/main';  
            }else{
                $.alert(error);
            }
        });
    };
    */
//EXTRA:


/*
    
    /*
    for (var i = 0; i < $scope.customers.length; i++) {
        $scope.studentNumbers.push($scope.customers[i].studentNumber);
        $scope.emails.push($scope.customers[i].emailAddress);
    }
    */
    /*
    $scope.delete = function(id, name) {
        $.confirm({
            title: 'Warning!',
            content: "Are you sure you want to remove the customer: " + name + "?",
            buttons: {
                confirm: function () {
                    deleteSQL('customers', id);

                    $.alert({title: 'Success',
                        content: 'Customer deleted successfully!', 
                        onClose: function () {
                            $window.location.reload();
                        },
                    });
                },
                cancel: function () {
                
                }
            }
        });
    };
    */


/*
    $scope.$on('$viewContentLoaded', function() {
        $("#studentNumber").mask('000000000');
        $("#phoneNumber").mask('(000)000-0000');

        for (var i = 0; i < $scope.customers.length; i++) {
            if($scope.customers[i].studentNumber != 'N/A')
                $scope.studentNumbers.push($scope.customers[i].studentNumber);
            $scope.emails.push($scope.customers[i].emailAddress);
        }
    });

    

    // create a message to display in our view
    $scope.save = function() {
        var customer = {
            name: $scope.name,
            studentType: $scope.studentType,
            studentNumber: $scope.studentNumber,
            phoneNumber: $scope.phoneNumber,
            emailAddress: $scope.emailAddress,
        };

        insertSQL('customers', customer);

        $.alert({
            title: 'Alert!',
            content: 'Data saved with success!',
        });

        $window.location.href = getData('target');  
    };
    */


/*
    $scope.$on('$viewContentLoaded', function() {
        if($scope.user.role == "admin")
            $scope.users = getData('users'); 
        else
            $scope.users = [session];
    });
    
    

    $scope.add = function() {
        $.confirm({
            title: 'Add User',
            content: 'url:modals/add_user.html',
            buttons: {
                ok: function(){
                    var username = this.$content.find('#username').val();
                    var varrole = this.$content.find('#role').val();
                    var password = this.$content.find('#password').val();
                    var confirm_password = this.$content.find('#confirm_password').val();

                    var data = {username: username, password: md5(password), role: varrole};

                    if(!username.trim() || !varrole.trim() || !password.trim() || !confirm_password.trim()){
                        $.alert('Form must be entirely filled!');   
                    }else{
                        if(password != confirm_password){
                            $.alert('Passwords must match!');       
                        }else{
                            insertSQL('users', data);
                            $.alert({title: 'Success',
                                content: 'User added successfully!', 
                                buttons: {
                                    ok: function(){
                                        $scope.users = getData('users');
                                        $window.location.reload();
                                    }
                                },
                                //
                            });
                            //
                        }
                    }
                },
                close: function(){

                }
            },
        });
    };

    $scope.edit = function(user){
        var session = getSession();

        $.confirm({
            title: 'Add User',
            content: 'url:modals/add_user.html',
            onOpen: function(data, status, xhr){
                // when content is fetched
                this.setContentAppend('<script type="text/javascript">'+
                '$("#username").val("'+user.username+'");'+
                '$("#role").val("'+user.role+'");'+
                '</script>');
                
                if(session.id == user.id){
                    this.setContentAppend('<script type="text/javascript">'+
                    '$("#role").attr("readonly","readonly");'+
                    '$("#role").attr("disabled","disabled");'+
                    '</script>');
                }
                
                //alert(session.username);

                if(session.username == 'admin'){
                    this.setContentAppend('<script type="text/javascript">'+
                    '$("#username").attr("readonly","readonly");'+
                    '$("#username").attr("disabled","disabled");'+
                    '$("#role").attr("readonly","readonly");'+
                    '$("#role").attr("disabled","disabled");'+
                    '</script>');   
                }
                
                this.$content.find('#role').val(user.role);
                this.$content.find('#password').val();
                this.$content.find('#confirm_password').val();
            },
            buttons: {
                ok: function(){
                    var username = this.$content.find('#username').val();
                    var varrole = this.$content.find('#role').val();
                    var password = this.$content.find('#password').val();
                    var confirm_password = this.$content.find('#confirm_password').val();
                    var data = null;
                    //Checking Data:
                    if(!password.trim() && !confirm_password.trim() && (username.trim() && varrole.trim())){ // Without change password
                        data = {username: username, role: varrole, id:user.id, password: user.password};
                        updateSQL('users', user.id, data);
                        
                        
                        if(session.id = user.id){
                            //alert('HUEHUEHUE');
                            //alert(data.username);
                            //console.log('HAWKEYE');
                            setSession(data);
                            //$scope.users = [data];
                        }
                        //console.log(data);
                        $.alert({title: 'Success',
                            content: 'User updated successfully!', 
                            onClose: function () {
                                $scope.users = getData('users');
                                $window.location.reload();
                            },
                        });
                    }else if(password.trim() && confirm_password.trim() && username.trim() && varrole.trim()){ //Everything check the pass:
                        if(password != confirm_password){
                            $.alert('Passwords must match!');       
                        }else{
                            data = {username: username, password: md5(password), role: varrole, id:user.id};
                            updateSQL('users', user.id, data);
                            
                            if(session.id = user.id){
                                setSession(data);
                                //session = user;
                                //$scope.users = [user];
                            }

                            $.alert({title: 'Success',
                                content: 'User updated successfully!', 
                                onClose: function () {
                                    $scope.users = getData('users');
                                    $window.location.reload();
                                },
                            });
                        }
                    }else{
                        $.alert('Form must be entirely filled!');   
                    }
                    //console.log(data);
                    //$scope.users = [data];
                },
                close: function(){}
            },
        });
    };

    $scope.delete = function(id, username) {
        $.confirm({
            title: 'Warning!',
            content: "Are you sure you want to remove the user: " + username + "?",
            buttons: {
                confirm: function () {
                    if(username != "admin" && username != session.username){
                        deleteSQL('users', id);

                        $.alert({title: 'Success',
                            content: 'User deleted successfully!', 
                            onClose: function () {
                                $window.location.reload();
                            },
                        });
                    }else{
                        $.alert('Delete the user "'+username+'" is not allowed');
                    }
                },
                cancel: function () {
                
                }
            }
        });
    };
    */

//SAVE INPUT ONLY:
/**
var saved_data = JSON.stringify(getInputData(tags_only, input_only));
addRequest(saved_data, function(response, error, body){
	if(response.statusCode == 200){
		var status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
		bootbox.alert(status + ":" + message, function(){
			$window.location.href = '#!/main';	
		})
	}else{
		bootbox.alert("Error: " + error);

		$scope.db.insert('request', {"input": saved_data, "code": error}).then(function(results) {
		  	console.log(results.insertId);
		});
	}
});
**/

<!--
        <a  class="btn btn-danger btn-lg"><i class="glyphicon glyphicon-remove-sign"></i> Bugs</a>
        <a  class="btn btn-danger btn-lg"><i class="glyphicon glyphicon-remove-sign"></i> About</a>
        <a  class="btn btn-success btn-lg"><i class="glyphicon glyphicon-thumbs-up"></i> </a>
        <a  class="btn btn-info btn-lg"><i class="glyphicon glyphicon-wrench"></i> Stored Requests</a>
        <a class="btn btn-info btn-lg"><i class="glyphicon glyphicon-wrench"></i> Customers</a>
        -->

		
      <!--</div>-->

	  
    <!--<div class="ui attached stackable menu">-->
      <!--<div class="ui container">-->

	  <!--
    <div class="field">
        
        
        <label class="radio-inline">
            <input type="radio"  ng-change="change(studentType)" 
        </label>
        <label class="radio-inline">
            <input type="radio" ng-model="customer.studentType.tipo" ng-change="change(studentType)" name="studentType" id="studentTypeFaculty" value="faculty"> Faculty
        </label>
    </div>
    -->

//const TAGS_ONLY = {
    //"technician name": "technicianName",
    //"": "customerType",
    //"student id number (if faculty, put n/a)": "studentNumber",
    //"customer name": "customerName",
    //"description": "description",
    //"how were the device problem(s) or general question(s) resolved?": "solution",
    //"subject": "ticketNumber",
    //"category": "category"
//};





/*
    else if(error.statusCode != 200){
        return 0;
    }
    return 1
    */
/*
    getRequests(function(error, response, body){
        var feedback = checkHttpStatus(error, response, body);
        if(feedback == -1){
            console.log('No connection');
        }else if(feedback == 0){
            console.log('Error: ' + body);
        }else{
            var a = $.parseJSON(body);
            var requests = a.operation.details;
            
            if(requests == undefined){
                setLastSeq();   
            }else{
                Lockr.set('requests',requests);
                setLastSeq();
            }
        }
    });
    */


/*
    getRequesters(function(error, response, body){
        var feedback = checkHttpStatus(error, response, body);

        if(feedback == -1){
            console.log('No connection');
        }else if(feedback == 0){
            console.log('Error: ' + body);
        }else{
            var a = $.parseJSON(body);
            var requests = a.operation.details;
            if(requests != undefined){
                Lockr.set('technicians',requests);
            }
        }
    });
*/


    /*
    getRequests(function(error, response, body){
        var feedback = checkHttpStatus(error, response, body);

        if(feedback == -1){
            console.log('No connection');
        }else if(feedback == 0){
            console.log('Error: ' + body);
        }else{
            var a = $.parseJSON(body);
            var requests = a.operation.details;
            if(requests != undefined){
                Lockr.set('requests',requests);
            }
        }
    });
    */


/*

function sendEmail(to, subject, content){
    //
    let email = {
        from: 'FVTC <helpdesk@fvtc.edu>',
        to: 'ddanielsilva661@gmail.com',
        subject: subject,
        text: content
    };

    mailgun.messages().send(email, function (error, body) {
        const booleanCheck = (error === undefined && body.message === "Queued. Thank you.");
        var message = booleanCheck ? "Message sent to your e-mail!" : "Error: " + body.message + " / " + error; 

        new Noty({
            text: message,
            type: 'success',
            timeout: 3000,
        }).on('onClose', function() {
            Lockr.sadd('logs', body);
        }).show();
        //
    });
};

function coreEmail(type, message){
    var db = admin.database();
    var ref = db.ref("/messages");
    ref.push({type: type, message: message}, function(error) {
      if (error) {
        console.log("Data could not be saved." + error);
      } else {
        console.log("Data saved successfully.");
      }
    });
}
function makeConfirm(text, ok, cancel){
    var n = new Noty({
        text: 'Do you want to continue? <input id="example" type="text">',
        buttons: [
          Noty.button(ok.text, 'btn btn-success', ok.callback, {id: 'button1', 'data-status': 'ok'}),
          Noty.button(cancel, 'btn btn-error', function () {
              console.log('button 2 clicked');
              n.close();
          })
        ]
    }).show();
}
*/


<!--INTAKE-->
<div class="ui text container">
    <div ng-controller="intakeCtrl">
        <div class="ui center aligned container">
            <h3>Device Intake Form - {{ semester }}</h3>
        </div>

         <div class="ui segment">
            I HEREBY authorize work to be performed upon my device. FVTC and its students may perform work on the listed device for the purposes of testing or inspection, at my risk. It is also understood that other adjustments or checks can be made to my device, while it is in the FVTC Student IT-Computer Support Center, in order to aid the students in their educational process. FVTC will not be held responsible for loss or damage to devices, software, hardware, or personal data; in case of fire, theft, accident, or any other cause beyond our control. I understand that the work will be performed by students in a learning environment and that there is NO WARRANTY expressed or implied on this device. If after ten forms of contact (email or phone messages), from the FVTC Student IT-Computer Support Center to you regarding your device being ready ready for pick up, and you have not contacted us; or if the device has been deemed abandoned after one month of no responses or contact from the owner, the device will be forfeited over to the FVTC lost and found department.
        </div>

        <div class="row">
            <span class="req">*</span> Required
        </div>
        
        <div class="form-group">
            <!--FORM-->
            <form class="ui form" name="intake" ng-submit="save()" novalidate>
                <div class="form-group">
                    <label for="agree">I have read and agree to the above statement. Clicking this box is the same as signing the document (Digital Signature).<span class="asp"> *</span></label>
                    <!---HA-->
                    <br/>
                    <label class="radio-inline">
                      <input type="radio" ng-model="agree" name="agree" id="agreeNo" value="no" ng-checked="true"> No
                    </label>
                    <label class="radio-inline">
                      <input type="radio" ng-model="agree" name="agree" id="agreeYes" value="yes"> Yes
                    </label>
                    <!---HA-->
                </div>
                
            <div id="contentIntake" ng-show="intake.agree.$modelValue == 'yes'">
                <h4>Previous Ticket Number: <span class="text-info">{{ lastSeq }}</span></h4>

                <div class="form-group">
                    <label for="technician" ng-model="technician">Technician <span class="asp">*</span></label>
                    <select name="technician" ng-model="technician" ng-options="technician.username as technician.username for technician in technicians" class="form-control" id="technician">
                    </select>
                </div>

                <div ng-class="{'has-error' : !checkTicket(intake.ticketNumber) || (intake.ticketNumber.$invalid && !intake.ticketNumber.$pristine), 'form-group': true}">    
                    <label for="ticketNumber">Ticket Number <span class="asp">*</span></label>
                    <input type="text" class="form-control" id="ticketNumber" ng-model="ticketNumber" name="ticketNumber" pattern="\d{3}\-[A-Z]" required>
                    <div class="text-danger" ng-show="intake.ticketNumber.$invalid && !intake.ticketNumber.$pristine">Ticket Number is required with format (999-D).</div>
                    <div class="text-danger" ng-show="!checkTicket(intake.ticketNumber)">This ticket number is already used</div>
                </div>

                <div class="form-group">
                    <label for="customer">Select a customer <span class="asp">*</span></label>
                    <select name="customer" ng-options="customer as customer.name for customer in customers" ng-model="customer" id="customer" class="form-control" required="">
                    </select>
                    <br>
                     <div>
                        <a href="#!/add_customer" class="btn btn-primary"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span>&nbsp;Add customer</a> 
                     </div>
                </div>

                <div class="form-group">
                    <label for="category">Select a category <span class="asp">*</span></label>
                    <select name="category" ng-options="option.value as option.name for option in categories" ng-model="category" id="category" class="form-control">
                    </select>
                </div>

                <div ng-class="{'has-error' : intake.bestTime.$invalid && !intake.bestTime.$pristine, 'form-group': true}">
                    <label for="bestTime">When and how is the best way to contact you? <span class="asp">*</span></label>    
                    <input type="text" class="form-control" id="bestTime" name="bestTime" ng-model="bestTime" required>
                    <div class="text-danger" ng-show="intake.bestTime.$invalid && !intake.bestTime.$pristine">Best Time is required.</div>
                </div>

                <div class="form-group">
                    <label for="withWarranty">Is the device under warranty? <span class="asp">*</span></label>
                    <!---HA-->
                    <br/>
                    <label class="radio-inline">
                      <input type="radio" ng-model="withWarranty" name="withWarranty" id="withWarrantyNo" value="no" ng-checked="true"> No
                    </label>
                    <label class="radio-inline">
                      <input type="radio" ng-model="withWarranty" name="withWarranty" id="withWarrantyYes" value="yes"> Yes
                    </label>
                    <!---HA-->
                </div>

                <div ng-class="{'has-error' : intake.lastTimeBackup.$invalid && !intake.lastTimeBackup.$pristine, 'form-group': true}">
                    <label for="lastTimeBackup" >When is the last time you backed up all of your important files on the device? <span class="asp">*</span></label>
                    
                    <input type="text" ng-model="lastTimeBackup" class="form-control" id="lastTimeBackup" name="lastTimeBackup" required>
                    <div class="text-danger" ng-show="intake.lastTimeBackup.$invalid && !intake.lastTimeBackup.$pristine">Information about last time of backup is required.</div>
                </div>

                <div class="form-group">
                    <label for="operatingSystem">Operating System <span class="asp">*</span></label>
                    <select name="operatingSystem" ng-options="os.value as os.name for os in osOptions" ng-model="operatingSystem" id="operatingSystem" class="form-control" required>
                    </select>
                </div>

                <div>
                    <label for="passwordDevice">Device's Password</label>
                </div>

                <div class="input-group">
                    <input type="password" ng-model="passwordDevice" class="form-control" id="passwordDevice" name="passwordDevice">
                    <span class="input-group-btn">
                        <button class="btn btn-default see_password" type="button"><span class="glyphicon glyphicon-eye-open"></span></button>
                    </span>
                </div>

                <br/>

                <div ng-class="{'has-error' : intake.howOldIsDevice.$invalid && !intake.howOldIsDevice.$pristine, 'form-group': true}">
                    <label for="howOldIsDevice">How old is the device? <span class="asp">*</span></label>
                    <input type="text" ng-model="howOldIsDevice" class="form-control" id="howOldIsDevice" name="howOldIsDevice" required>
                    <div class="text-danger" ng-show="intake.howOldIsDevice.$invalid && !intake.howOldIsDevice.$pristine">Age of the computer is required.</div>
                </div>

                <div ng-class="{'has-error' : intake.brandName.$invalid && !intake.brandName.$pristine, 'form-group': true}">
                    <label for="brandName">Device Manufacturer Brand Name <span class="asp">*</span></label>
                    <input type="text" ng-model="brandName" class="form-control" id="brandName" name="brandName" required>
                    <div class="text-danger" ng-show="intake.brandName.$invalid && !intake.brandName.$pristine">Device Manufacturer Brand Name is required.</div>
                </div>

                <div class="form-group">
                    <label for="colorDevice">Color of the Device <span class="asp">*</span></label>
                    <select name="colorDevice" ng-options="color.value as color.name for color in colorOptions" ng-model="colorDevice" id="colorDevice" class="form-control" required>
                    </select>
                </div>

                <div class="form-group">
                    <label for="modelNumber">Model Number of the Device</label>
                    <input type="text" ng-model="modelNumber" class="form-control" id="modelNumber" name="modelNumber" >
                </div>

                <div ng-class="{'has-error' : withCharger == 'no' && !intake.withCharger.$pristine, 'form-group': true}">
                    <label for="withCharger">Is the charger included with the device? <span class="asp">*</span></label>
                    <!---HA-->
                    <br/>
                    <label class="radio-inline">
                      <input type="radio" ng-model="withCharger" name="withCharger" id="withChargerNo" value="no"> No
                    </label>
                    <label class="radio-inline">
                      <input type="radio" ng-model="withCharger" ng-checked="true" name="withCharger" id="withChargerYes" value="yes"> Yes
                    </label>
                    <!---HA-->
                    <div class="text-danger" ng-show="withCharger == 'no' && !intake.withCharger.$pristine">The charger must be included</div>
                </div>

                <div class="form-group">
                    <label for="wantOffice">Would you like Microsoft Office 365 installed on the device? <span class="asp">*</span></label>
                    <!---HA-->
                    <br/>
                    <label class="radio-inline">
                      <input type="radio" ng-checked="true" ng-model="wantOffice" name="wantOffice" id="wantOfficeNo" value="no"> No
                    </label>
                    <label class="radio-inline">
                      <input type="radio" ng-model="wantOffice" name="wantOffice" id="wantOfficeYes" value="yes"> Yes
                    </label>
                    <!---HA-->
                </div>
                
                <div ng-show="intake.wantOffice.$modelValue == 'yes'">
                    <div>
                        <label for="blackboardPassword">What is your Blackboard password, if you would like Microsoft Office 365 installed?</label>
                    </div>

                    <div ng-class="{'has-error' : intake.blackboardPassword.$invalid && !intake.blackboardPassword.$pristine, 'input-group': true}">
                        <input type="password" class="form-control" id="blackboardPassword" ng-model="blackboardPassword" name="blackboardPassword" ng-required="wantOffice == 'yes'">
                        <span class="input-group-btn">
                            <button class="btn btn-default see_password" type="button"><span class="glyphicon glyphicon-eye-open"></span></button>
                        </span>
                    </div>

                    <div class="text-danger" ng-show="intake.blackboardPassword.$invalid && !intake.blackboardPassword.$pristine">Blackboard Password is required.</div>
                </div>

                <div class="form-group">
                    <label for="wantAntivirus">Would you like a free antivirus program installed on the device? <span class="asp">*</span></label>
                    <!---HA-->
                    <br/>
                    <label class="radio-inline">
                      <input type="radio" ng-checked="true" ng-model="wantAntivirus" name="wantAntivirus" id="wantAntivirusNo" value="no"> No
                    </label>
                    <label class="radio-inline">
                      <input type="radio" ng-model="wantAntivirus" name="wantAntivirus" id="wantAntivirusYes" value="yes"> Yes
                    </label>
                    <!---HA-->
                </div>
                
                <div class="form-group" ng-show="operatingSystem == osOptions[8].value || operatingSystem == osOptions[9].value || operatingSystem == osOptions[10].value">
                    <label for="wantUpgrade">Would you like your operating system upgraded to Windows 10, if possible? <span class="asp">*</span></label>
                    <!---HA-->
                    <br/>
                    <label class="radio-inline">
                      <input type="radio" ng-model="wantUpgrade" ng-checked="true" name="wantUpgrade" id="wantUpgradeNo" value="no"> No
                    </label>
                    <label class="radio-inline">
                      <input type="radio" ng-model="wantUpgrade" name="wantUpgrade" id="wantUpgradeYes" value="yes"> Yes
                    </label>
                    <!---HA-->
                </div>

                <div class="form-group">
                    <label for="moreHelp">Is there anything that you would like to be educated or trained on related to the device? <span class="asp">*</span></label>
                    <textarea id="moreHelp" name="moreHelp" rows="5" ng-model="moreHelp" class="form-control"></textarea>
                </div>

                <div ng-class="{'has-error' : intake.description.$invalid && !intake.description.$pristine, 'form-group': true}">
                    <label for="description">Description of the Device Problem(s) or General Question(s) <span class="asp">*</span></label>
                    <textarea class="form-control" id="description" name="description" ng-model="description" rows="5" required></textarea>
                    <div class="text-danger" ng-show="intake.description.$invalid && !intake.description.$pristine">Description is required.</div>
                </div>

                <div class="ui center aligned container">
                    <button ng-disabled="intake.$invalid && !checkTicket(intake.ticketNumber)" class="ui primary button" type="submit">&nbsp;Submit</button>

                    <a class="ui danger button" href="#" onclick="goBack()"><span class="glyphicon glyphicon-arrow-left" aria-hidden="true" ></span>&nbsp;Go Back</a>
                </div>

            </div>

                <div class="ui center aligned container">
                    <a class="ui danger button" href="#" onclick="goBack()" ng-show="agree == 'no'"><span class="glyphicon glyphicon-arrow-left" aria-hidden="true" ></span>&nbsp;Go Back</a>
                </div>

            </form>
            <!--END FORM-->
        </div>
        <!---->
    </div>
</div>
<script type="text/javascript">
    //Intake
    $('#alternativePhone').mask('(000)000-0000');
    $('#phoneNumber').mask('(000)000-0000');
    $('#ticketNumber').mask('000');

    //Intake
    $('#withCharger').change(function(){
        if($(this).val() == 'no'){
            bootbox.alert({title: 'Error', message: 'The charger MUST be included!'});
        }
    });

    $('#wantOffice').change(function(){
        if($(this).val() == 'yes'){
            $('#blackboardPassword').val('');
            $('#blackboardPassword').prop("readonly", false);
            $('#blackboardPassword').attr('required', 'required');
        }else{
            $("#blackboardPassword").val('');
            $('#blackboardPassword').prop("readonly", true);
            $('#blackboardPassword').removeAttr('required');
        }
    });

    $("#operatingSystem").change(function(){
        //console.log(//);
        if(!($(this).find(":selected").text() == "Windows 7" || $(this).find(":selected").text() == "Windows 8" || $(this).find(":selected").text() == "Windows 8.1")){
            $("#wantUpgrade").val('no');
            console.log($("#wantUpgrade").val());
        }
    });

    // PASSWORD OPERATIONS:
    $(".see_password").mouseleave(function(event) {
        /* Act on the event */
        var val = $(this).parent().parent().find('input').attr('type', 'password');
    });

    $(".see_password").click(function(event) {
        /* Act on the event */
        var val = $(this).parent().parent().find('input').attr('type', 'text');
    });
</script>


/*
const BASE_CLOSE = {
    "operation": {
        "details": {
            "closeAccepted": "Accepted",
            "closeComment": "The closing comment"
        }
    }
}
*/

/*
const SATISFACTION = [
        { name: 'Very Satisfied', value: 'Very Satisfied' }, 
        { name: 'Satisfied', value: 'Satisfied' },
        { name: 'Unsatisfied', value: 'Unsatisfied' }, 
        { name: 'Very Unsatisfied', value: 'Very Unsatisfied' },
];
*/


/*
const COLORS = [
        { name: 'Black', value: 'Black' }, 
        { name: 'Blue', value: 'Blue' },
        { name: 'Brown', value: 'Brown' }, 
        { name: 'Gold', value: 'Gold' },
        { name: 'Green', value: 'Green' },
        { name: 'Grey', value: 'Grey' },
        { name: 'Orange', value: 'Orange' },
        { name: 'Pink', value: 'Pink' },
        { name: 'Purple', value: 'Purple' },
        { name: 'Red', value: 'Red' },
        { name: 'Silver', value: 'Silver' },
        { name: 'White', value: 'White' },
        { name: 'Yellow', value: 'Yellow' }
];

const OS = [
        { name: 'Android', value: 'Android' }, 
        { name: 'Arch Linux', value: 'Arch Linux' },
        { name: 'Fedora', value: 'Fedora' }, 
        { name: 'iOS', value: 'iOS' },
        { name: 'Linux Mint', value: 'Linux Mint' },
        { name: 'Mac OS X', value: 'Mac OS X' },
        { name: 'Ubuntu', value: 'Ubuntu' },
        { name: 'Windows 10', value: 'Windows 10' },
        { name: 'Windows 7', value: 'Windows 7' },
        { name: 'Windows 8', value: 'Windows 8' },
        { name: 'Windows 8.1', value: 'Windows 8.1' },
        { name: 'Windows Vista', value: 'Windows Vista' },
        { name: 'Windows XP', value: 'Windows XP' }
];  
*/


//
//data.operation.details.category = input.category.$viewValue;
//data.operation.details.description = 
//data.operation.details.solution = input.solution.$viewValue;
//data.operation.details.technician = input.technician.$viewValue.username;
//data.operation.details.requester = input.technician.$viewValue.username;
//data.operation.details.subject = input.ticketNumber.$viewValue;
//data.operation.details.SUBJECT = input.ticketNumber.$viewValue; 
//data.operation.details["student or faculty"] = input.customer.$viewValue.type;
//data.operation.details["student id number (if faculty, put n/a)"] = input.customer.$viewValue.studentNumber;
//data.operation.details["customer name"] = input.customer.$viewValue.name;
//return data;


//return "000";
//}else{
//console.log(last);

/*
angApp.controller('releaseCtrl', function($scope, $window, $http) {
    //
    $scope.semester = Lockr.get('settings').semester;
    /*
    if($scope.requests == undefined || $scope.requests.length == 0){
        $('#no_requests').modal('show');
        $window.location.href = '#!/main';
    }
    
});
*/
//const BASE_REQUEST = "http://localhost:8080/sdpapi/request"; //HOME
//const BASE_REQUESTER = "http://localhost:8080/sdpapi/requester"; //HOME

//const TECHNICIAN_KEY = "A848D148-6475-41E2-97DA-10E72B0ED804"; //FVTC
//const BASE_REQUEST = "http://10.4.132.81:8080/sdpapi/request"; //FVTC

<!--
            <div class="field">
                <label for="wantOffice">Would you like Microsoft Office 365 installed on the device? <span class="req">*</span></label>
                <textarea class="form-control" id="wantOffice" name="wantOffice" ng-model="intakeRequest.wantOffice" rows="5" required></textarea>
            </div>
            
            <div class="field">
                <label for="wantAntivirus">Would you like a free antivirus program installed on the device?  <span class="req">*</span></label>
                <textarea class="form-control" id="wantAntivirus" name="wantAntivirus" ng-model="intakeRequest.wantAntivirus" rows="5" required></textarea>
            </div>
            -->


//
/*
const CATS = [
    { name: 'Data Recovery', value: 'Data Recovery' }, 
    { name: 'Flash Drive', value: 'Flash Drive' },
    { name: 'Forgot Password', value: 'Forgot Password' }, 
    { name: 'Hardware', value: 'Hardware' },
    { name: 'Internet', value: 'Internet' }, 
    { name: 'Keyboard', value: 'Keyboard' },
    { name: 'Malware', value: 'Malware' }, 
    { name: 'Monitor', value: 'Monitor' },
    { name: 'Network', value: 'Network' }, 
    { name: 'Operating System', value: 'Operating System' },
    { name: 'Power Supply', value: 'Power Supply' }, 
    { name: 'Printer', value: 'Printer' },
    { name: 'Slow Computer', value: 'Slow Computer' }, 
    { name: 'Smartphone', value: 'Smartphone' },
    { name: 'Software', value: 'Software' }, 
    { name: 'Sound', value: 'Sound' },
    { name: 'Touchpad', value: 'Touchpad' },
    { name: 'Unbootable', value: 'Unbootable' },
    { name: 'Wi-fi', value: 'Wi-fi' }
];
*/



//"solution": data.solution,
//"requester" : "administrator",
//data.operation.details.category = data.category.$viewValue;
//data.operation.details.description = data.description.$viewValue;
//data.operation.details.solution = data.solution.$viewValue;
//data.operation.details.technician = data.technician.$viewValue;
//data.operation.details.requester = data.technician.$viewValue;
//data.operation.details.subject = input.ticketNumber.$viewValue;
//data.operation.details.SUBJECT = input.ticketNumber.$viewValue; 
//data.operation.details["ticket number"] = input.ticketNumber.$viewValue;
//data.operation.details["student or faculty"] = input.customer.$viewValue.studentType;
//data.operation.details["customer name"] = input.customer.$viewValue.name;
//data.operation.details["student id number (if faculty, put n/a)"] = input.customer.$viewValue.studentNumber;
//return data;
//
/*
angApp.controller('requestCtrl', function($scope, $window, $http) {
    //
    $scope.semester = Lockr.get('settings').semester;
    $scope.storedRequests = Lockr.get('storedRequests');

    if($scope.storedRequests == undefined || $scope.storedRequests.length == 0){
        $('#no_requests').modal('show');
        $window.location.href = '#!/main';
    }
    //
});
*/


//
/*
const TAGS_INTAKE = {
    //"technician name": "technicianName",
    //"ticket number" : "ticketNumber",
    //"student or faculty" : "customerType",
    //"student id number (if faculty, put n/a)" : "studentNumber",
    //"customer name" : "customerName",
    //"phone number" : "phoneNumber",
    //"email address" : "emailAddress",
    //"alternate phone number" : "alternativePhone",
    //"When and how is the best way to contact you?" : "bestTime",
    //"Is the device under warranty?" : "withWarranty",
    //"When is the last time you backed up all of your important files on the device?" : "lastTimeBackup",
    //"Operating System" : "operatingSystem",
    "What is the password of the device?": "passwordDevice",
    //"How old is the device?" : "howOldIsDevice",
    //"Device Manufacturer Brand Name" : "brandName",
    //"Color of the Device" : "colorDevice",
    //"Model Number of the Device" : "modelNumber",
    //"Is the charger included with the device?" : "withCharger",
    //"Would you like Microsoft Office 365 installed on the device?" : "wantOffice",
    //"What is your Blackboard password, if you would like Microsoft Office 365 installed?" : "blackboardPassword",
    //"Would you like a free antivirus program installed on the device?" : "wantAntivirus",
    //"Would you like your operating system upgraded to Windows 10, if possible?" : "wantUpgrade",
    //"Is there anything that you would like to be educated or trained on related to the device?" : "moreHelp",
    "description" : "description",
    "subject": "ticketNumber",
    "category": "category"
};
*/

/*
const TAGS_INTAKE = {
        "technician name": "technicianName",
        "ticket number" : "ticketNumber",
        "student or faculty" : "customerType",
        "student id number (if faculty, put n/a)" : "studentNumber",
        "customer name" : "customerName",
        "phone number" : "phoneNumber",
        "email address" : "emailAddress",
        "alternate phone number" : "alternativePhone",
        "When and how is the best way to contact you?" : "bestTime",
        "Is the device under warranty?" : "withWarranty",
        "When is the last time you backed up all of your important files on the device?" : "lastTimeBackup",
        "Operating System" : "operatingSystem",
        "What is the password of the device?": "passwordDevice",
        "How old is the device?" : "howOldIsDevice",
        "Device Manufacturer Brand Name" : "brandName",
        "Color of the Device" : "colorDevice",
        "Model Number of the Device" : "modelNumber",
        "Is the charger included with the device?" : "withCharger",
        "Would you like Microsoft Office 365 installed on the device?" : "wantOffice",
        "What is your Blackboard password, if you would like Microsoft Office 365 installed?" : "blackboardPassword",
        "Would you like a free antivirus program installed on the device?" : "wantAntivirus",
        "Would you like your operating system upgraded to Windows 10, if possible?" : "wantUpgrade",
        "Is there anything that you would like to be educated or trained on related to the device?" : "moreHelp",
        "description" : "description",
        "subject": "ticketNumber",
        "category": "category"
};
*/


                <!--<div class="text-danger" ng-show="only.customer.ticketNumber.$invalid && !only.ticketNumber.$pristine">Ticket Number is required with format (999-D).</div>
                <div class="text-danger" ng-show="!checkTicket(only.ticketNumber.$viewValue)">This ticket number is already used</div>-->   


                
                <!--<div class="text-danger" ng-show="only.customer.ticketNumber.$invalid && !only.ticketNumber.$pristine">Ticket Number is required with format (999-D).</div>
                <div class="text-danger" ng-show="!checkTicket(only.ticketNumber.$viewValue)">This ticket number is already used</div>-->   


<!--<div class="ui fluid large teal submit button">Login</div>-->


/*
    $scope.$on('$viewContentLoaded', function() {
        
        //Colocar Load bar
        checkTechnicians();
        checkRequests();

        
        
        $scope.satisfactionLevel = SATISFACTION;
        $scope.satisfaction = $scope.satisfactionLevel[1].value;
        $scope.categories = CATS;
        $scope.category = $scope.categories[0].value;
        $scope.colorOptions = COLORS;
        $scope.colorDevice = $scope.colorOptions[0].value;
        $scope.osOptions = OS;
        $scope.operatingSystem = $scope.osOptions[7].value;
        
        //Check customers:
        $scope.technicians = localStorage.technicians;
        $scope.requests = localStorage.requests;

        

        booleanCheck = ($scope.technicians != undefined && $scope.technicians.length > 0);
        $scope.technician = booleanCheck ? $scope.technicians[0] : {};
        //Check Requests:
        booleanCheck = ($scope.requests != undefined && $scope.requests.length > 0);
        $scope.request = booleanCheck ? $scope.requests[0] : {};
        
    });
    */
    
    /*

    $scope.saveEntity = function(x, entity){
        Lockr.sadd(entity, x);
        //
        new Noty({
            text: entity + ' saved successfully!',
            type: 'success',
            timeout: 3000,
        }).on('onClose', function() {
            $scope.back();
        }).show();
    };

    $scope.editEntity = function(id, x, entity){
        updateSQL(entity, id, x);
        //
        new Noty({
            text: entity + ' updated successfully!',
            type: 'success',
            timeout: 3000,
        }).on('onClose', function() {
            $scope.back();
        }).show();
    };

    $scope.deleteEntity = function(id, entity){
        deleteSQL(entity, id);
        //
        new Noty({
            text: entity + ' deleted successfully!',
            type: 'success',
            timeout: 3000,
        }).on('onClose', function() {
            //$scope.back();
            location.reload();
        }).show();
    };

    $scope.viewEntity = function(id){

    };

    //Helpers:
    $scope.isLogged = localStorage.session != {};
    $scope.isOnline = navigator.onLine;
    */

/*
    $scope.feedback = function(){
        $('#feedback').modal("setting", {
            onHide: function () {
                $scope.message = "";
            }
        }).modal('show');
    };

    $scope.sendFeedback = function(){
        alert($scope.message);
    }
    */


//Consts:
//const TECHNICIAN_KEY = "51A25649-5E6D-4CA2-BFD6-4A52DB6E4652"; //HOME
//var TECHNICIAN_KEY = Lockr.get('settings').key;
//var IP             = Lockr.get('settings').ip;
/*
var BASE_REQUEST   = "http://"+IP+"/sdpapi/request"; //HOME
var BASE_REQUESTER = "http://"+IP+"/sdpapi/requester"; //HOME

function changeSettings(){
    //TECHNICIAN_KEY = Lockr.get('settings').key;
    IP             = Lockr.get('settings').ip;
    BASE_REQUEST   = "http://"+Lockr.get('settings').ip+"/sdpapi/request"; //HOME
    BASE_REQUESTER = "http://"+Lockr.get('settings').ip+"/sdpapi/requester"; //HOME    
}
*/
//changeSettings();
//tx.executeSql('INSERT INTO users (id, username, code, password, role) VALUES (?,?,?,?,?)', [2,"erik", "erik", md5("erik"), "user"]);



/**/
/*
function checkTechnicians(){
    checkData('technicians');
}

function checkRequests(){
    checkData('requests');
}

function checkLastSeq(){
    checkRequests();
    setLastSeq();
}
*/


/*
const INPUT_INTAKE = {
    "operation": {
        "details" : {
            "requester" : "administrator",
            "requesttemplate" : "Default Request",
            "priority": "Low",
            "level": "Tier 1",
            "status": "open",
        },
    },
};
*/

/*
                new Noty({
                    text: 'Customer data saved successfully!',
                    type: 'success',
                    timeout: 1000,
                }).on('onClose', function() {
                    $scope.fetch();
                    goBack();
                }).show(); 
                */

/*
    let filteredData = filterOnly(data);
    console.log(filteredData);
    
    addRequest(JSON.stringify(filteredData), function(response, error, body){    
        if(response && response.statusCode == 200){
            let status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
            new Noty({
                text: status + ": " + message,
                type: 'success',
                timeout: 1000,
                callbacks: CALLBACK_GO_BACK,
            }).show(); 
        }else{
            new Noty({
                text: "Error: " + error,
                type: 'error',
                timeout: 1000,
                callbacks: CALLBACK_GO_BACK,
            }).show(); 
            code = error.statusCode ? error.statusCode : -1;
            Lockr.sadd('storedRequests', {input: JSON.stringify(filteredData), code: code});
        }
    });
    */

/*
        let filteredData = filterOnly(data);
        console.log(filteredData);
        
        addRequest(JSON.stringify(filteredData), function(response, error, body){    
            if(response && response.statusCode == 200){
                let status = $.parseJSON(body).operation.result.status, message = $.parseJSON(body).operation.result.message;
                new Noty({
                    text: status + ": " + message,
                    type: 'success',
                    timeout: 1000,
                    callbacks: CALLBACK_GO_BACK,
                }).show(); 
            }else{
                new Noty({
                    text: "Error: " + error,
                    type: 'error',
                    timeout: 1000,
                    callbacks: CALLBACK_GO_BACK,
                }).show(); 
                code = error.statusCode ? error.statusCode : -1;
                Lockr.sadd('storedRequests', {input: JSON.stringify(filteredData), code: code});
            }
        });
        */


//var message = "Hello World!";
//$('#modal.content').html(text);
//$('#modal').modal('show');

//checkData('technicians');
//basicPostRequest(URL, input, operation_name, callBackOk, callBackError);
//postRequest(getBaseRequest(), JSON.stringify(BASE_GET), OPERATIONS[3], callBack);

//checkData('requests');
//postRequest(getBaseRequest(), BASE_GET, OPERATIONS[3], callBack);
//this.checkLastSeq = function(){
//    checkRequests();
//    setLastSeq();
//},

/*
function getRequests(callBack){
    //basicPostRequest(URL, input, operation_name, callBackOk, callBackError);
    postRequest(getBaseRequest(), JSON.stringify(BASE_GET), OPERATIONS[3], callBack);
}


function getRequesters(callBack){
    postRequest(getBaseRequester(), INPUT_REQUESTERS, OPERATIONS[4], callBack);
}

//
function addRequest(input, callBack){
    postRequest(getBaseRequest(), input, OPERATIONS[0], callBack);
}

function closeRequest(x, callBack){
    postRequest(getBaseRequest()+"/"+x, BASE_CLOSE, OPERATIONS[2], callBack);    
}

function postRequest(URL, input_data, operation_name, callBack){
    request.post({
        url:    URL,
        form:   {
            format: "json", TECHNICIAN_KEY: Lockr.get('settings').key,
            INPUT_DATA: JSON.stringify(input_data), OPERATION_NAME: operation_name
        }
    }, function(error, response, body){
        callBack(response, error, body);
    });
}

function getRequest(URL, input_data, operation_name, callBack){
    request.get({
        url:    URL,
        form:   {
            format: "json", TECHNICIAN_KEY: Lockr.get('settings').key,
            INPUT_DATA: JSON.stringify(input_data), OPERATION_NAME: operation_name
        }
    }, function(error, response, body){
        callBack(response, error, body);
    });
}
/*
function simplePost(URL, input_data, callBack){
    request.post({
        url:    URL,
        form:  input_data
    }, function(error, response, body){
        callBack(response, error, body);
    });
}
*/
/*
function checkHttpStatus(error, response, body){
    if(error == undefined){
        return -1; // No Internet
    }

    return (error.statusCode != 200) ? 0 : 1;
}

function checkData(entity){
    //
    var callBack = function(error, response, body){
        var feedback = checkHttpStatus(error, response, body);

        if(feedback == -1){
            console.log('No connection');
        }else if(feedback == 0){
            console.log('Error: ' + body);
        }else{
            var a = $.parseJSON(body);
            var requests = a.operation.details;
            if(requests != undefined){
                Lockr.set(entity, requests);
                console.log(requests);
            }
        }
    }
    //
    if(entity == 'technicians'){
        getRequesters(callBack);    
    }else if(entity == 'requests'){
        getRequests(callBack);
    }
}
/

function getLastSequence(list){
    var output = "000";

    if(!(list == undefined || list == null || list.length == 0 || list[0].SUBJECT === undefined)){
        let last = list[0].SUBJECT;
        
        if(parseInt(last) !== undefined){
            var next = parseInt(last);
            output = PRINTJ.sprintf("%03d", next);
        }
    }

    return output;
}

function getNextSeq(list){
    var last = getLastSequence(list);
    var output = "001";

    if(parseInt(last) != undefined){
        var next = parseInt(last) + 1;
        output = PRINTJ.sprintf("%03d", next);
    }
    
    return output;
}
*/

/*
    //
    $scope.openRecoverPassword = function(){
        $('#recover_email').modal("setting", {
            onHide: function () {
                $scope.username = "";
            }
        }).modal('show');    
    };

    $scope.sendPassword = function(){
        transactionSQL('SELECT username, code FROM users WHERE username = ?', [$scope.username], function(results){
            if(results.rows.length > 0){
                let selected = results.rows[0];
                const bodyMessage = PRINTJ.sprintf("Hello %s. Your password is %s", selected.username, selected.code);
                console.log(bodyMessage);
                //SEND E-mail Here:
                //sendEmail(users[i].email, "Password recovery", bodyMessage);
            }else{
                baseMessage('Username not found!', 'error', 3000, function(){});    
            }
        });
    };
    */

function insertSQL(table, data){
    let temp = localStorage[table];
    temp.push(data);
    localStorage[table] = temp;     
}

function updateSQL(table, index, data){
    let temp = localStorage[table];
    temp[index] = data;
    localStorage[table] = temp;
}

function deleteSQL(table, index){
    let temp = localStorage[table];
    if(index == temp.length - 1){ //last
        temp.splice(-1, 1);    
    }else if(index == 0){ // first
        temp.shift();
    }else{
        newData = [];
        for (var i = 0; i < temp.length; i++) {
            if(i != index){
                newData.push(temp[i])
            }
        }
        temp = newData;  
    }
    localStorage[table] = temp;    
}

/*
    $scope.lastSeq      = Lockr.get('lastSeq'); //requestUtils.getLastSeq(Lockr.get('requests'));
    $('#ticketNumber').mask('000');
    //Init Form:
    $scope.onlyRequest = {};
    $scope.idVerified = "No";
    
    $scope.customers = [];
    $scope.categories = CATS;
    $scope.deviceTypes = DEVICE_TYPES;
    $scope.technicians = Lockr.get('technicians');
    //Check customers:
    //Colocar Load bar
    $scope.onlyRequest.customer = {};
    $scope.onlyRequest.wereSolved = "Resolved";

    $scope.onlyRequest.category = $scope.categories[0].value;
    $scope.onlyRequest.deviceType = $scope.deviceTypes[0].value;
    
    if($scope.technicians.length > 0)
        $scope.onlyRequest.technician = Lockr.get('session').technician;

    $scope.ticketNumber = requestUtils.getNextSeq();
    $scope.onlyRequest.ticketNumber = $scope.ticketNumber;
    
    transactionSQL('SELECT * FROM customers', [], function(results){
        if(results.rows.length > 0){                
            $scope.customers = [];
            
            for (var i = 0; i < results.rows.length; i++) {
                $scope.customers.push(results.rows[i]);
            }

            $scope.onlyRequest.customer = $scope.customers[0];
            $scope.$apply();
        }
    });
    
    $scope.isSameTicket = function(ticket){
        return $scope.tickets.includes(ticket);
    }
    
    $scope.save = function() {
        $scope.state = "loading";
        var input = $scope.filterOnly($scope.onlyRequest);
        console.log(input);
        
        basicPostRequest(getBaseRequest(), input, OPERATIONS[0], function(requests){
            baseMessage('G113 Request saved succesfully!', 'success', 2000, goToMain);
            requestUtils.checkRequests();
            $scope.state = "";
        }, function(error){
            baseMessage(error.message, 'error', 3000, goToMain);
            $scope.state = "";
            Lockr.sadd('storedRequests', {input: JSON.stringify(input), code: error.message});
        });
    };

    $scope.filterOnly = function(data){
        return {
            "operation": {
                "details" : {
                    "requesttemplate" : "Only G113 Support/Service Provided",
                    "priority": "Low",
                    "level": "Tier 1",
                    "status": "closed",
                    "location": "G113 – Student Help Desk",
                    "semester": $scope.semester, 
                    "ticket status": data.wereSolved,
                    "device type": data.deviceType,
                    "category": data.category,
                    "description": data.description,
                    "technician": data.technician,
                    "requester": data.technician,
                    "subject": data.ticketNumber,
                    "Student or Faculty?": data.customer.type,
                    "resolution": data.solution,
                    "customer name": data.customer.name,
                    "Customer ID Verified?": $scope.idVerified,
                },
            },
        };
    };
    */


    <!--<br>
        
        <form class="ui {{state}} form" name="data" ng-submit="save()" ng-show="idVerified == 'Yes' && userAgreement == 'Yes'" novalidate>




            <h4>Previous Ticket Number: <span class="text-info">{{ lastSeq }}</span></h4>
            
            <div class="field" ng-class="{'has-error' : !checkTicket(intakeRequest.ticketNumber.$viewValue) || (intakeRequest.ticketNumber.$invalid && !intakeRequest.ticketNumber.$pristine), 'form-group': true}">
                <label for="ticketNumber">Ticket Number <span class="req">*</span></label>
                <input class="form-control" type="text" id="ticketNumber" name="ticketNumber" ng-model="intakeRequest.ticketNumber" pattern="\d{3}" required>
            </div>

            <div class="field">
                <label for="technician">Technician <span class="req">*</span></label>
                <select name="technician" ng-model="intakeRequest.technician" ng-options="technician as technician for technician in technicians" id="technician">
                </select>
            </div>

            <div class="field">
                <label for="customer" >Customer <span class="req">*</span></label>
                <select name="customer" ng-model="intakeRequest.customer" ng-options="customer as customer.name for customer in customers" id="customer" required>
                </select>
                <!--<br>
                <div>
                    <a href="#""  ng-click="addCustomer(intakeRequest)" class="ui primary button"><span class="glyphicon glyphicon-plus" aria-hidden="true"></span>&nbsp;Add customer</a> 
                </div>-->
            </div>

            <div class="field">
                <label for="bestTime">When and how is the best way to contact you? <span class="req">*</span></label>
                <input type="text" class="form-control" id="bestTime" name="bestTime" ng-model="intakeRequest.bestTime" required>
            </div>

            <!---->

            <div class="field">
                <label for="category">Select a category <span class="req">*</span></label>
                <select name="category" ng-model="intakeRequest.category" ng-options="option.value as option.value for option in categories" id="category">
                </select>
            </div>

            <div class="grouped fields">
                <label for="withWarranty">Is the device under warranty? <span class="req">*</span></label>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="withWarranty" ng-model="intakeRequest.withWarranty" value="Yes" id="withWarrantyYes">
                    <label>Yes</label>
                    </div>
                </div>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="withWarranty" ng-model="intakeRequest.withWarranty" value="No" id="withWarrantyNo"> 
                    <label>No</label>
                    </div>
                </div>
            </div>

            <div class="field">
                <label for="howOldIsDevice">How old is the device? <span class="req">*</span></label>
                <input type="text" class="form-control" id="howOldIsDevice" name="howOldIsDevice" ng-model="intakeRequest.howOldIsDevice" required>
            </div>

            <div class="field">
                <label for="lastTimeBackup">When is the last time you backed up all of your important files on the device? <span class="req">*</span></label>
                <input type="text" class="form-control" id="lastTimeBackup" name="lastTimeBackup" ng-model="intakeRequest.lastTimeBackup" required>
            </div>

            <div class="field">
                <label for="deviceType">Device Type <span class="req">*</span></label>
                <select name="deviceType" ng-model="intakeRequest.deviceType" ng-options="deviceType.value as deviceType.value for deviceType in deviceTypes" id="deviceType" required>
                </select>
            </div>

            <div class="field">
                <label for="brandName">Device Manufacturer Brand Name <span class="req">*</span></label>
                <input type="text" class="form-control" id="brandName" name="brandName" ng-model="intakeRequest.brandName" required>
            </div>

            <div class="field">
                <label for="modelNumber">Model Number <span class="req">*</span></label>
                <input type="text" class="form-control" id="modelNumber" name="modelNumber" ng-model="intakeRequest.modelNumber" required>
            </div>

            <div class="field">
                <label for="operatingSystem">Operating System <span class="req">*</span></label>
                <input type="text" class="form-control" id="operatingSystem" name="operatingSystem" ng-model="intakeRequest.operatingSystem" required>
            </div>

            <div class="field">
                <label for="colorDevice">Color of Device <span class="req">*</span></label>
                <input type="text" class="form-control" id="colorDevice" name="colorDevice" ng-model="intakeRequest.colorDevice" required>
            </div>

            <div class="grouped fields">
                <label for="withCharger">Is the charger included with the device? <span class="req">*</span></label>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="withCharger" ng-model="intakeRequest.withCharger" value="Yes" id="withChargerYes">
                    <label>Yes</label>
                    </div>
                </div>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="withCharger" ng-model="intakeRequest.withCharger" value="No" id="withChargerNo"> 
                    <label>No</label>
                    </div>
                </div>
            </div>

            <div class="field">
                <label for="passwordDevice">Device's Password</label>
                <input type="text" class="form-control" id="passwordDevice" name="passwordDevice" ng-model="intakeRequest.passwordDevice">
            </div>

            <!---->
            <div class="field">
                <label for="moreHelp">Is there anything you would like to be educated or trained on related to the device? <span class="req">*</span></label>
                <textarea class="form-control" id="moreHelp" name="moreHelp" ng-model="intakeRequest.moreHelp" rows="5" required></textarea>
            </div>

            <div class="grouped fields">
                <label for="wantOffice">Would you like Microsoft Office 365 installed on the device? <span class="req">*</span></label>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="wantOffice" ng-model="intakeRequest.wantOffice" value="Yes" id="wantOfficeYes">
                    <label>Yes</label>
                    </div>
                </div>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="wantOffice" ng-model="intakeRequest.wantOffice" value="No" id="wantOfficeNo"> 
                    <label>No</label>
                    </div>
                </div>
            </div>

            <div class="grouped fields">
                <label for="wantAntivirus">Would you like a free antivirus program installed on the device? <span class="req">*</span></label>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="wantAntivirus" ng-model="intakeRequest.wantAntivirus" value="Yes" id="wantAntivirusYes">
                    <label>Yes</label>
                    </div>
                </div>
                
                <div class="field">
                    <div class="ui radio checkbox">
                    <input type="radio" name="wantAntivirus" ng-model="intakeRequest.wantAntivirus" value="No" id="wantAntivirusNo"> 
                    <label>No</label>
                    </div>
                </div>
            </div>

            <div class="field">
                <label for="description">Description of the Device Problem(s) or General Question(s) <span class="req">*</span></label>
                <textarea class="form-control" id="description" name="description" ng-model="intakeRequest.description" rows="5" required></textarea>
            </div>
           
            <div class="ui center aligned container">
                <button class="ui primary button" type="submit" ng-disabled="data.$invalid">Submit</button>
                <a class="ui button" ng-click="goBack()" href="#">Go Back</a>
            </div>
        </form>-->


